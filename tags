!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CB_loss	src/loss/class_balanced_loss.py	/^def CB_loss(labels, logits, samples_per_cls, no_of_classes, loss_type, beta, gamma):$/;"	f
Config	src/config.py	/^class Config:$/;"	c
Counter	src/dataset.py	/^    from collections import Counter$/;"	i
Dataset	src/dataset.py	/^from torch.utils.data import Dataset$/;"	i
F	src/loss/class_balanced_loss.py	/^import torch.nn.functional as F$/;"	i
Identity	src/model.py	/^class Identity(nn.Module):$/;"	c
Image	src/dataset.py	/^from PIL import Image$/;"	i
Image	src/utils/function.py	/^from PIL import Image$/;"	i
NASNetALarge	src/model.py	/^class NASNetALarge(nn.Module):$/;"	c
Network	src/model.py	/^class Network(nn.Module):$/;"	c
PNASNet5Large	src/model.py	/^class PNASNet5Large(nn.Module):$/;"	c
ResNet18	src/model.py	/^class ResNet18(nn.Module):$/;"	c
ResNet50	src/model.py	/^class ResNet50(nn.Module):$/;"	c
Skin7	src/dataset.py	/^class Skin7(Dataset):$/;"	c
SummaryWriter	src/trainer.py	/^from torch.utils.tensorboard import SummaryWriter$/;"	i
__getitem__	src/dataset.py	/^    def __getitem__(self, index):$/;"	m	class:Skin7	file:
__init__	src/config.py	/^    def __init__(self):$/;"	m	class:Config
__init__	src/dataset.py	/^    def __init__(self, root=".\/data", iter_fold=1, train=True, transform=None):$/;"	m	class:Skin7
__init__	src/model.py	/^    def __init__(self):$/;"	m	class:Identity
__init__	src/model.py	/^    def __init__(self, backbone="resnet50", num_classes=7, input_channel=3,$/;"	m	class:Network
__init__	src/model.py	/^    def __init__(self, num_classes, input_channel, pretrained):$/;"	m	class:NASNetALarge
__init__	src/model.py	/^    def __init__(self, num_classes, input_channel, pretrained):$/;"	m	class:PNASNet5Large
__init__	src/model.py	/^    def __init__(self, num_classes, input_channel, pretrained):$/;"	m	class:ResNet18
__init__	src/model.py	/^    def __init__(self, num_classes, input_channel, pretrained):$/;"	m	class:ResNet50
__len__	src/dataset.py	/^    def __len__(self):$/;"	m	class:Skin7	file:
_add_common_setting	src/config.py	/^    def _add_common_setting(self):$/;"	m	class:Config
_add_customized_setting	src/config.py	/^    def _add_customized_setting(self):$/;"	m	class:Config
_load_common_setting	src/config.py	/^    def _load_common_setting(self):$/;"	m	class:Config
_load_customized_setting	src/config.py	/^    def _load_customized_setting(self):$/;"	m	class:Config
_path_suitable_for_server	src/config.py	/^    def _path_suitable_for_server(self):$/;"	m	class:Config
_print	src/trainer.py	/^_print = init_logging(log_dir, exp).info$/;"	v
_test_dataname2save	src/utils/function.py	/^def _test_dataname2save():$/;"	f
_test_image_related	src/utils/function.py	/^def _test_image_related():$/;"	f
acc	src/trainer.py	/^        acc = accuracy_score(y_true, y_pred)$/;"	v
accimage	src/dataset.py	/^    import accimage$/;"	i
accimage_loader	src/dataset.py	/^def accimage_loader(path):$/;"	f
accuracy_score	src/trainer.py	/^from sklearn.metrics import accuracy_score$/;"	i
argparse	src/config.py	/^import argparse$/;"	i
backbone	src/trainer.py	/^backbone = configs_dict["backbone"]$/;"	v
batch_size	src/trainer.py	/^batch_size = configs_dict["batch_size"]$/;"	v
beta	src/loss/class_balanced_loss.py	/^    beta = 0.9999$/;"	v
betas	src/trainer.py	/^                           betas=(0.9, 0.999), eps=1e-08, amsgrad=True)$/;"	v
cb_loss	src/loss/class_balanced_loss.py	/^    cb_loss = CB_loss(labels, logits, samples_per_cls, no_of_classes,loss_type, beta, gamma)$/;"	v
ckpt	src/trainer.py	/^    ckpt = torch.load(resume_path)$/;"	v
class_balanced_loss	src/trainer.py	/^from loss import class_balanced_loss$/;"	i
class_weights	src/trainer.py	/^    class_weights = torch.FloatTensor(weights).cuda()$/;"	v
config	src/trainer.py	/^import config$/;"	i
configs	src/trainer.py	/^configs = config.Config()$/;"	v
configs_dict	src/trainer.py	/^configs_dict = configs.get_config()$/;"	v
copy	src/utils/function.py	/^import copy$/;"	i
criterion	src/trainer.py	/^    criterion = nn.CrossEntropyLoss().to(device)$/;"	v
criterion	src/trainer.py	/^    criterion = nn.CrossEntropyLoss(weight=class_weights).to(device)$/;"	v
cuda_ids	src/trainer.py	/^cuda_ids = configs_dict["cudas"]$/;"	v
data	src/trainer.py	/^            data = data.to(device)$/;"	v
dataname_2_save	src/utils/function.py	/^def dataname_2_save(imgs_path, saved_dir):$/;"	f
dataset	src/dataset.py	/^    dataset = Skin7(root=root, train=False, transform=transforms.ToTensor())$/;"	v
dataset	src/dataset.py	/^    dataset = Skin7(root=root, train=True, transform=transforms.ToTensor())$/;"	v
dataset	src/trainer.py	/^import dataset$/;"	i
default_loader	src/dataset.py	/^def default_loader(path):$/;"	f
desc	src/trainer.py	/^desc = "Exp-{}-Train".format(exp)$/;"	v
device	src/model.py	/^    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")$/;"	v
device	src/trainer.py	/^device = torch.device("cuda" if torch.cuda.is_available() else "cpu")$/;"	v
device_ids	src/trainer.py	/^device_ids = list(range(len(cuda_ids.split(","))))$/;"	v
dicts	src/trainer.py	/^    dicts = {$/;"	v
eval_frequency	src/trainer.py	/^eval_frequency = configs_dict["eval_frequency"]$/;"	v
exp	src/trainer.py	/^exp = configs_dict["experiment_index"]$/;"	v
focal_loss	src/loss/class_balanced_loss.py	/^def focal_loss(labels, logits, alpha, gamma):$/;"	f
format_np_output	src/utils/function.py	/^def format_np_output(np_arr):$/;"	f
forward	src/model.py	/^    def forward(self, inputs):$/;"	m	class:Identity
forward	src/model.py	/^    def forward(self, inputs):$/;"	m	class:Network
forward	src/model.py	/^    def forward(self, x):$/;"	m	class:NASNetALarge
forward	src/model.py	/^    def forward(self, x):$/;"	m	class:PNASNet5Large
forward	src/model.py	/^    def forward(self, x):$/;"	m	class:ResNet18
forward	src/model.py	/^    def forward(self, x):$/;"	m	class:ResNet50
gamma	src/loss/class_balanced_loss.py	/^    gamma = 2.0$/;"	v
get_config	src/config.py	/^    def get_config(self):$/;"	m	class:Config
get_data	src/dataset.py	/^    def get_data(self, iterNo, data_dir):$/;"	m	class:Skin7
get_grad_norm	src/utils/function.py	/^def get_grad_norm(processed_images):$/;"	f
get_image_backend	src/dataset.py	/^    from torchvision import get_image_backend$/;"	i
get_lr	src/trainer.py	/^    print_loss_sometime$/;"	i
get_lr	src/utils/function.py	/^def get_lr(optimizer):$/;"	f
init_environment	src/trainer.py	/^    print_loss_sometime$/;"	i
init_environment	src/utils/function.py	/^def init_environment(seed=0, cuda_id="0"):$/;"	f
init_logging	src/trainer.py	/^    print_loss_sometime$/;"	i
init_logging	src/utils/function.py	/^def init_logging(output_dir, exp):$/;"	f
initialization	src/trainer.py	/^initialization = configs_dict["initialization"]$/;"	v
input_channel	src/trainer.py	/^input_channel = 3$/;"	v
input_size	src/model.py	/^    input_size = (3, 331, 331)$/;"	v
input_size	src/trainer.py	/^    input_size = 224$/;"	v
input_size	src/trainer.py	/^    input_size = 331$/;"	v
iter_fold	src/trainer.py	/^iter_fold = configs_dict["iter_fold"]$/;"	v
labels	src/loss/class_balanced_loss.py	/^    labels = torch.randint(0,no_of_classes, size = (10,))$/;"	v
learning_rate	src/trainer.py	/^learning_rate = configs_dict["learning_rate"]$/;"	v
log_dir	src/trainer.py	/^log_dir = configs_dict["log_dir"]$/;"	v
logging	src/utils/function.py	/^import logging$/;"	i
logits	src/loss/class_balanced_loss.py	/^    logits = torch.rand(10,no_of_classes).float()$/;"	v
loss	src/trainer.py	/^        loss = criterion(predict, target)$/;"	v
loss_fn	src/trainer.py	/^loss_fn = configs_dict["loss_fn"]$/;"	v
loss_type	src/loss/class_balanced_loss.py	/^    loss_type = "focal"$/;"	v
losses	src/trainer.py	/^    losses = []$/;"	v
mcr	src/trainer.py	/^        mcr = mean_class_recall(y_true, y_pred)$/;"	v
mean	src/trainer.py	/^    mean = [0.485, 0.456, 0.406]$/;"	v
mean	src/trainer.py	/^    mean = [0.5, 0.5, 0.5]$/;"	v
mean_class_recall	src/trainer.py	/^from utils.metric import mean_class_recall$/;"	i
mean_class_recall	src/utils/metric.py	/^def mean_class_recall(y_true, y_pred):$/;"	f
model	src/trainer.py	/^import model$/;"	i
model_dir	src/trainer.py	/^model_dir = configs_dict["model_dir"]$/;"	v
model_path	src/trainer.py	/^            model_path = os.path.join(model_dir, str(exp), str(epoch))$/;"	v
n_epochs	src/trainer.py	/^n_epochs = configs_dict["n_epochs"]$/;"	v
net	src/model.py	/^    net = Network(backbone="NASNetALarge", num_classes=200)$/;"	v
net	src/trainer.py	/^    net = net.to(device)$/;"	v
net	src/trainer.py	/^    net = nn.DataParallel(net, device_ids=device_ids).to(device)$/;"	v
net	src/trainer.py	/^net = model.Network(backbone=backbone, num_classes=num_classes,$/;"	v
net_state_dict	src/trainer.py	/^            net_state_dict = net.state_dict()$/;"	v
nn	src/loss/class_balanced_loss.py	/^import torch.nn.functional as F$/;"	i
nn	src/model.py	/^import torch.nn as nn$/;"	i
nn	src/trainer.py	/^import torch.nn as nn$/;"	i
no_of_classes	src/loss/class_balanced_loss.py	/^    no_of_classes = 5$/;"	v
np	src/dataset.py	/^import numpy as np$/;"	i
np	src/loss/class_balanced_loss.py	/^import numpy as np$/;"	i
np	src/trainer.py	/^import numpy as np$/;"	i
np	src/utils/function.py	/^import numpy as np$/;"	i
np	src/utils/metric.py	/^import numpy as np$/;"	i
num_classes	src/trainer.py	/^num_classes = configs_dict["num_classes"]$/;"	v
num_workers	src/trainer.py	/^                                          num_workers=num_workers,$/;"	v
num_workers	src/trainer.py	/^                                        num_workers=num_workers,$/;"	v
num_workers	src/trainer.py	/^num_workers = configs_dict["num_workers"]$/;"	v
opt	src/trainer.py	/^    opt = torch.optim.Adam(net.parameters(), lr=learning_rate,$/;"	v
opt	src/trainer.py	/^    opt = torch.optim.SGD(net.parameters(), lr=learning_rate, momentum=0.9)$/;"	v
optimizer	src/trainer.py	/^optimizer = configs_dict["optimizer"]$/;"	v
os	src/dataset.py	/^import os$/;"	i
os	src/trainer.py	/^import os$/;"	i
os	src/utils/function.py	/^import os$/;"	i
pd	src/dataset.py	/^import pandas as pd$/;"	i
pil_loader	src/dataset.py	/^def pil_loader(path):$/;"	f
predict	src/trainer.py	/^            predict = torch.argmax(net(data), dim=1).cpu().data.numpy()$/;"	v
predict	src/trainer.py	/^        predict = net(data)$/;"	v
preprocess_image	src/utils/function.py	/^def preprocess_image(pil_im, mean, std, resize=512, resize_im=True,$/;"	f
pretrainedmodels	src/model.py	/^import pretrainedmodels$/;"	i
print_config	src/config.py	/^    def print_config(self, _print=None):$/;"	m	class:Config
print_dataset	src/dataset.py	/^def print_dataset(dataset, print_time):$/;"	f
print_loss_sometime	src/trainer.py	/^    print_loss_sometime$/;"	i
print_loss_sometime	src/utils/function.py	/^def print_loss_sometime(dicts, print_frequency=50, _print=None):$/;"	f
print_model	src/model.py	/^    def print_model(self, input_size, device):$/;"	m	class:Network
re_size	src/trainer.py	/^    re_size = 300$/;"	v
re_size	src/trainer.py	/^    re_size = 441$/;"	v
recreate_image	src/utils/function.py	/^def recreate_image(im_as_var, reverse_mean, reverse_std):$/;"	f
resume	src/trainer.py	/^resume = configs_dict["resume"]$/;"	v
resume_path	src/trainer.py	/^    resume_path = os.path.join(model_dir, str(exp), str(resume))$/;"	v
root	src/dataset.py	/^    root = "..\/data"$/;"	v
sampler	src/trainer.py	/^                                          sampler=train_sampler)$/;"	v
sampler	src/trainer.py	/^                                        sampler=val_sampler)$/;"	v
samples_per_cls	src/loss/class_balanced_loss.py	/^    samples_per_cls = [2,3,1,2,2]$/;"	v
save_image	src/utils/function.py	/^def save_image(im, path):$/;"	f
scale	src/trainer.py	/^                            scale=[0.7, 1.3]),$/;"	v
scheduler	src/trainer.py	/^    scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau($/;"	v
scheduler	src/trainer.py	/^scheduler = None$/;"	v
seed	src/trainer.py	/^seed = configs_dict["seed"]$/;"	v
sota	src/trainer.py	/^sota = {}$/;"	v
start_epoch	src/trainer.py	/^    start_epoch = resume + 1$/;"	v
start_epoch	src/trainer.py	/^start_epoch = 0$/;"	v
std	src/trainer.py	/^    std = [0.229, 0.224, 0.225]$/;"	v
std	src/trainer.py	/^    std = [0.5, 0.5, 0.5]$/;"	v
str2bool	src/utils/function.py	/^def str2bool(val):$/;"	f
str2list	src/utils/function.py	/^def str2list(val):$/;"	f
summary	src/model.py	/^from torchsummary import summary$/;"	i
sys	src/config.py	/^import sys$/;"	i
sys	src/model.py	/^import sys$/;"	i
sys	src/trainer.py	/^import sys$/;"	i
sys	src/utils/function.py	/^import sys$/;"	i
target	src/trainer.py	/^            target = target.cpu().data.numpy()$/;"	v
tf_log	src/trainer.py	/^tf_log = os.path.join(log_dir, exp)$/;"	v
threshold	src/trainer.py	/^                threshold=1e-4)$/;"	v
time	src/utils/function.py	/^import time$/;"	i
timethis	src/utils/function.py	/^def timethis(func, *args, **kwargs):$/;"	f
torch	src/loss/class_balanced_loss.py	/^import torch$/;"	i
torch	src/loss/class_balanced_loss.py	/^import torch.nn.functional as F$/;"	i
torch	src/model.py	/^import torch$/;"	i
torch	src/model.py	/^import torch.nn as nn$/;"	i
torch	src/trainer.py	/^import torch$/;"	i
torch	src/trainer.py	/^import torch.nn as nn$/;"	i
torch	src/utils/function.py	/^import torch$/;"	i
torchvision	src/model.py	/^import torchvision$/;"	i
train_avg_loss	src/trainer.py	/^    train_avg_loss = np.mean(losses)$/;"	v
train_transform	src/trainer.py	/^train_transform = transforms.Compose([$/;"	v
trainloader	src/trainer.py	/^trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,$/;"	v
trainset	src/trainer.py	/^trainset = dataset.Skin7(root=".\/data\/", iter_fold=iter_fold, train=True,$/;"	v
transform	src/trainer.py	/^                         transform=train_transform)$/;"	v
transform	src/trainer.py	/^                       transform=val_transform)$/;"	v
transforms	src/dataset.py	/^from torchvision import transforms$/;"	i
transforms	src/trainer.py	/^from torchvision import transforms$/;"	i
val_transform	src/trainer.py	/^val_transform = transforms.Compose([$/;"	v
valloader	src/trainer.py	/^valloader = torch.utils.data.DataLoader(valset, batch_size=batch_size,$/;"	v
valset	src/trainer.py	/^valset = dataset.Skin7(root=".\/data\/", iter_fold=iter_fold, train=False,$/;"	v
weights	src/trainer.py	/^    weights = [0.036, 0.002, 0.084, 0.134, 0.037, 0.391, 0.316]$/;"	v
wrapper	src/utils/function.py	/^    def wrapper(*args, **kwargs):$/;"	f	function:timethis
wraps	src/utils/function.py	/^from functools import wraps$/;"	i
writer	src/trainer.py	/^writer = SummaryWriter(log_dir=tf_log)$/;"	v
y_pred	src/trainer.py	/^        y_pred = []$/;"	v
y_pred	src/utils/metric.py	/^    y_pred = [0, 0, 1, 1, 2, 2, 2]$/;"	v
y_true	src/trainer.py	/^        y_true = []$/;"	v
y_true	src/utils/metric.py	/^    y_true = [0, 0, 0, 0, 1, 2, 2]$/;"	v
